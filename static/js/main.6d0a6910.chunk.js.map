{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","components/Error.js","components/CounterButton.js","components/Header.js","containers/App.js","Action.js","Constants.js","Reducer.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","PureComponent","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filterRobots","filter","robot","toLowerCase","includes","Error","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","initialStateSearch","initialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6d0a6910.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    // if(true) {\n    //     throw new Error('NOOOOOO!');\n    // }\n    console.log('CardList');\n    return (\n        <div>\n            {robots.map((user, i) => {\n                return (\n                    <Card\n                        key={robots[i].id}\n                        id={robots[i].id}\n                        name={robots[i].name}\n                        email={robots[i].email}\n                    />\n                );\n            })}\n        </div>\n    );\n};\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input\n                aria-label='Search Robots'\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robots'\n                onChange={searchChange}\n            />{' '}\n        </div>\n    );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n\n    return (\n        <div style={\n            {\n            overflowY: 'scroll', \n            border: '1px solid black', \n            height: '1100px'\n            }\n            }>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true})\n    }   \n\n    render() {\n        if(this.state.hasError) {\n            return <h1>Oooops. That is not good</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React, { PureComponent } from 'react';\n\nclass CounterButton extends PureComponent {\n    constructor() {\n        super();\n        this.state = {\n            count: 0\n        };\n    }\n\n    updateCount = () => {\n        this.setState(state => {\n            return { count: state.count + 1 };\n        });\n    };\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (this.state.count !== nextState.count) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    render() {\n        console.log('CounterButton');\n        return (\n            <button color={this.props.color} onClick={this.updateCount}>\n                Count:{this.state.count}\n            </button>\n        );\n    }\n}\n\nexport default CounterButton;\n","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n    render() {\n        console.log('Header');\n        return (\n            <div>\n                <h1 className='f1'> RobotFriends</h1>;\n                <CounterButton color={'red'} />\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/Searchbox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/Error';\nimport Header from '../components/Header';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../Action';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onSearchChange: event => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    };\n};\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filterRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n\n        if (isPending) {\n            return <h1 className='tc f1'> Loading... </h1>;\n        } else {\n            return (\n                <div className='tc'>\n                    <Header />\n                    <SearchBox searchChange={onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filterRobots} />\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './Constants.js';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(res => res.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './Constants.js';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload })\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state;\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './Reducer';\nimport * as serviceWorker from './serviceWorker';\n// eslint-disable-next-line\nconst logger = createLogger();\nconst rootReducer = combineReducers({\n    searchRobots,\n    requestRobots\n});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}